# render.yaml - Configuration for deploying Vibe App on Render

services:
  # 1. PostgreSQL Database Service
  - type: psql         # Service type: PostgreSQL Database
    name: vibe-db      # Name for your database service on Render
    region: oregon     # Optional: Choose a region close to you (e.g., frankfurt, singapore)
    plan: free         # Use the free tier for the database
    postgresMajorVersion: 15 # Specify desired PostgreSQL version (check Render docs for available)
    ipAllowList: []    # Allows connections from anywhere (Render services connect internally)

  # 2. Backend Web Service (NestJS)
  - type: web          # Service type: Web Service (for APIs, backends)
    name: vibe-backend
    env: node          # Environment: Node.js
    region: oregon     # Match the database region if possible
    plan: free         # Use the free tier web service (sleeps on inactivity)
    # Specifies the subdirectory containing the backend code
    rootDir: backend-ts 
    # Commands to build the backend
    buildCommand: npm install && npm run build
    # Command to start the backend server (using production build)
    startCommand: npm run start:prod
    # Health check path (adjust if your app has a different one or none)
    healthCheckPath: /api/health # Assumes you have a health endpoint at /api/health
    envVars:
      - key: NODE_ENV
        value: production
      # Link to the database service defined above
      - key: DATABASE_URL
        fromService:
          type: psql
          name: vibe-db
          property: connectionString # Render provides the internal connection string
      # --- Secrets - Configure these in the Render Dashboard ---
      # These should NOT be committed here if the repo is public.
      # Set them as Environment Variables in the Render service settings.
      - key: ANTHROPIC_API_KEY
        sync: false # Tell Render not to sync this value from YAML (set in UI)
      - key: ELEVENLABS_API_KEY
        sync: false # Tell Render not to sync this value from YAML (set in UI)
      - key: ELEVENLABS_VOICE_ID
        sync: false # Tell Render not to sync this value from YAML (set in UI)
      # Port Render expects the service to listen on
      - key: PORT
        value: 8000 # Match the port your NestJS app listens on (default is 3000, but you use 8000)
      # CORS Origin - Allow your deployed frontend
      - key: CORS_ORIGIN
        fromService:
          type: web
          name: vibe-frontend # Needs to match the frontend service name below
          property: url # Render provides the deployed frontend URL

  # 3. Frontend Web Service (Next.js)
  - type: web          # Service type: Web Service (suitable for Next.js standard deployment)
    name: vibe-frontend
    env: node          # Environment: Node.js (Next.js needs it for build/start)
    region: oregon     # Match other services
    plan: free         # Use the free tier web service
    # Specifies the subdirectory containing the frontend code
    rootDir: frontend
    # Commands to build the frontend
    buildCommand: npm install && npm run build
    # Command to start the Next.js production server
    startCommand: npm run start
    envVars:
      - key: NODE_ENV
        value: production
      # --- Crucial: Tell the Frontend where the Backend API is ---
      # Needs to match the backend service name above
      - key: NEXT_PUBLIC_API_URL 
        fromService:
          type: web
          name: vibe-backend 
          property: url # Render provides the deployed backend URL
      # Note: Render automatically sets PORT for web services, Next.js typically uses it. 